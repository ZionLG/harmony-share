// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // none of these fields are used by next-auth

    bio           String?
    Playlist      Playlist[]
    Collaborator  Collaborator[]
    notifications Notification[]
}

model Notification {
    id                 String           @id @default(cuid())
    userId             String
    type               NotificationType
    notificationTypeId String           @unique
    read               Boolean          @default(false)
    createdAt          DateTime         @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model InviteNotification {
    id       String       @id @default(cuid())
    collabId String       @unique
    collab   Collaborator @relation(fields: [collabId], references: [id], onDelete: Cascade)

    @@index([collabId])
}

enum NotificationType {
    invite
}

model Playlist {
    id           String  @id @default(cuid())
    name         String
    image        String?
    description  String?
    readPrivacy  Privacy
    writePrivacy Privacy

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String

    tracks Track[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    collaborators Collaborator[]

    @@index([ownerId])
}

model Track {
    id         String   @id @default(cuid())
    spotifyId  String
    playlistId String
    AddedAt    DateTime @default(now())

    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

    @@index([playlistId])
}

model Collaborator {
    id         String       @id @default(cuid())
    playlistId String
    userId     String
    joinedAt   DateTime?
    status     CollabStatus @default(pending)

    playlist           Playlist            @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    InviteNotification InviteNotification?

    @@unique([playlistId, userId])
    @@index([userId])
}

enum CollabStatus {
    pending
    accepted
    declined
}

enum Privacy {
    public
    private
    invite
}
